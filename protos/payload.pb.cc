// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payload.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "payload.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace payload {

namespace {

const ::google::protobuf::Descriptor* packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_Payload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_Payload_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_PeerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_PeerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_Crypto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_Crypto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* packet_MessageTypes_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_payload_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_payload_2eproto() {
  protobuf_AddDesc_payload_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "payload.proto");
  GOOGLE_CHECK(file != NULL);
  packet_descriptor_ = file->message_type(0);
  static const int packet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet, payload_),
  };
  packet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_descriptor_,
      packet::default_instance_,
      packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet, _has_bits_[0]),
      -1,
      -1,
      sizeof(packet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet, _internal_metadata_),
      -1);
  packet_Payload_descriptor_ = packet_descriptor_->nested_type(0);
  static const int packet_Payload_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_Payload, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_Payload, peerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_Payload, crypto_),
  };
  packet_Payload_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_Payload_descriptor_,
      packet_Payload::default_instance_,
      packet_Payload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_Payload, _has_bits_[0]),
      -1,
      -1,
      sizeof(packet_Payload),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_Payload, _internal_metadata_),
      -1);
  packet_PeerInfo_descriptor_ = packet_descriptor_->nested_type(1);
  static const int packet_PeerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_PeerInfo, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_PeerInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_PeerInfo, username_),
  };
  packet_PeerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_PeerInfo_descriptor_,
      packet_PeerInfo::default_instance_,
      packet_PeerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_PeerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(packet_PeerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_PeerInfo, _internal_metadata_),
      -1);
  packet_Crypto_descriptor_ = packet_descriptor_->nested_type(2);
  static const int packet_Crypto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_Crypto, clientkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_Crypto, hashedkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_Crypto, encryptedhashedkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_Crypto, encryptedmsg_),
  };
  packet_Crypto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packet_Crypto_descriptor_,
      packet_Crypto::default_instance_,
      packet_Crypto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_Crypto, _has_bits_[0]),
      -1,
      -1,
      sizeof(packet_Crypto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_Crypto, _internal_metadata_),
      -1);
  packet_MessageTypes_descriptor_ = packet_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_payload_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_descriptor_, &packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_Payload_descriptor_, &packet_Payload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_PeerInfo_descriptor_, &packet_PeerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packet_Crypto_descriptor_, &packet_Crypto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_payload_2eproto() {
  delete packet::default_instance_;
  delete packet_reflection_;
  delete packet_Payload::default_instance_;
  delete packet_Payload_reflection_;
  delete packet_PeerInfo::default_instance_;
  delete packet_PeerInfo_reflection_;
  delete packet_Crypto::default_instance_;
  delete packet_Crypto_reflection_;
}

void protobuf_AddDesc_payload_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_payload_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rpayload.proto\022\007payload\"\254\003\n\006packet\022\022\n\nt"
    "ime_stamp\030\001 \002(\006\022(\n\007payload\030\002 \002(\0132\027.paylo"
    "ad.packet.Payload\032\224\001\n\007Payload\0225\n\004type\030\001 "
    "\002(\0162\034.payload.packet.MessageTypes:\tPEER_"
    "INFO\022*\n\010peerInfo\030\002 \001(\0132\030.payload.packet."
    "PeerInfo\022&\n\006crypto\030\003 \001(\0132\026.payload.packe"
    "t.Crypto\032=\n\010PeerInfo\022\021\n\tipAddress\030\001 \002(\t\022"
    "\014\n\004port\030\002 \002(\r\022\020\n\010userName\030\003 \002(\t\032`\n\006Crypt"
    "o\022\021\n\tclientKey\030\001 \002(\t\022\021\n\thashedKey\030\002 \002(\014\022"
    "\032\n\022encryptedHashedKey\030\003 \002(\014\022\024\n\014encrypted"
    "Msg\030\004 \002(\014\",\n\014MessageTypes\022\r\n\tPEER_INFO\020\000"
    "\022\r\n\tADVERTISE\020\001", 455);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "payload.proto", &protobuf_RegisterTypes);
  packet::default_instance_ = new packet();
  packet_Payload::default_instance_ = new packet_Payload();
  packet_PeerInfo::default_instance_ = new packet_PeerInfo();
  packet_Crypto::default_instance_ = new packet_Crypto();
  packet::default_instance_->InitAsDefaultInstance();
  packet_Payload::default_instance_->InitAsDefaultInstance();
  packet_PeerInfo::default_instance_->InitAsDefaultInstance();
  packet_Crypto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_payload_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_payload_2eproto {
  StaticDescriptorInitializer_payload_2eproto() {
    protobuf_AddDesc_payload_2eproto();
  }
} static_descriptor_initializer_payload_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* packet_MessageTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_MessageTypes_descriptor_;
}
bool packet_MessageTypes_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const packet_MessageTypes packet::PEER_INFO;
const packet_MessageTypes packet::ADVERTISE;
const packet_MessageTypes packet::MessageTypes_MIN;
const packet_MessageTypes packet::MessageTypes_MAX;
const int packet::MessageTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_Payload::kTypeFieldNumber;
const int packet_Payload::kPeerInfoFieldNumber;
const int packet_Payload::kCryptoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_Payload::packet_Payload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:payload.packet.Payload)
}

void packet_Payload::InitAsDefaultInstance() {
  peerinfo_ = const_cast< ::payload::packet_PeerInfo*>(&::payload::packet_PeerInfo::default_instance());
  crypto_ = const_cast< ::payload::packet_Crypto*>(&::payload::packet_Crypto::default_instance());
}

packet_Payload::packet_Payload(const packet_Payload& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:payload.packet.Payload)
}

void packet_Payload::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  peerinfo_ = NULL;
  crypto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_Payload::~packet_Payload() {
  // @@protoc_insertion_point(destructor:payload.packet.Payload)
  SharedDtor();
}

void packet_Payload::SharedDtor() {
  if (this != default_instance_) {
    delete peerinfo_;
    delete crypto_;
  }
}

void packet_Payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_Payload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_Payload_descriptor_;
}

const packet_Payload& packet_Payload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_payload_2eproto();
  return *default_instance_;
}

packet_Payload* packet_Payload::default_instance_ = NULL;

packet_Payload* packet_Payload::New(::google::protobuf::Arena* arena) const {
  packet_Payload* n = new packet_Payload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:payload.packet.Payload)
  if (_has_bits_[0 / 32] & 7u) {
    type_ = 0;
    if (has_peerinfo()) {
      if (peerinfo_ != NULL) peerinfo_->::payload::packet_PeerInfo::Clear();
    }
    if (has_crypto()) {
      if (crypto_ != NULL) crypto_->::payload::packet_Crypto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_Payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:payload.packet.Payload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .payload.packet.MessageTypes type = 1 [default = PEER_INFO];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::payload::packet_MessageTypes_IsValid(value)) {
            set_type(static_cast< ::payload::packet_MessageTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peerInfo;
        break;
      }

      // optional .payload.packet.PeerInfo peerInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_peerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_crypto;
        break;
      }

      // optional .payload.packet.Crypto crypto = 3;
      case 3: {
        if (tag == 26) {
         parse_crypto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crypto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:payload.packet.Payload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:payload.packet.Payload)
  return false;
#undef DO_
}

void packet_Payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:payload.packet.Payload)
  // required .payload.packet.MessageTypes type = 1 [default = PEER_INFO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .payload.packet.PeerInfo peerInfo = 2;
  if (has_peerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peerinfo_, output);
  }

  // optional .payload.packet.Crypto crypto = 3;
  if (has_crypto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->crypto_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:payload.packet.Payload)
}

::google::protobuf::uint8* packet_Payload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:payload.packet.Payload)
  // required .payload.packet.MessageTypes type = 1 [default = PEER_INFO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .payload.packet.PeerInfo peerInfo = 2;
  if (has_peerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->peerinfo_, false, target);
  }

  // optional .payload.packet.Crypto crypto = 3;
  if (has_crypto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->crypto_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payload.packet.Payload)
  return target;
}

int packet_Payload::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:payload.packet.Payload)
  int total_size = 0;

  // required .payload.packet.MessageTypes type = 1 [default = PEER_INFO];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional .payload.packet.PeerInfo peerInfo = 2;
    if (has_peerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->peerinfo_);
    }

    // optional .payload.packet.Crypto crypto = 3;
    if (has_crypto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crypto_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_Payload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:payload.packet.Payload)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const packet_Payload* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_Payload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:payload.packet.Payload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:payload.packet.Payload)
    MergeFrom(*source);
  }
}

void packet_Payload::MergeFrom(const packet_Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payload.packet.Payload)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_peerinfo()) {
      mutable_peerinfo()->::payload::packet_PeerInfo::MergeFrom(from.peerinfo());
    }
    if (from.has_crypto()) {
      mutable_crypto()->::payload::packet_Crypto::MergeFrom(from.crypto());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void packet_Payload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:payload.packet.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_Payload::CopyFrom(const packet_Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payload.packet.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_Payload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_peerinfo()) {
    if (!this->peerinfo_->IsInitialized()) return false;
  }
  if (has_crypto()) {
    if (!this->crypto_->IsInitialized()) return false;
  }
  return true;
}

void packet_Payload::Swap(packet_Payload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_Payload::InternalSwap(packet_Payload* other) {
  std::swap(type_, other->type_);
  std::swap(peerinfo_, other->peerinfo_);
  std::swap(crypto_, other->crypto_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_Payload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_Payload_descriptor_;
  metadata.reflection = packet_Payload_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_PeerInfo::kIpAddressFieldNumber;
const int packet_PeerInfo::kPortFieldNumber;
const int packet_PeerInfo::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_PeerInfo::packet_PeerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:payload.packet.PeerInfo)
}

void packet_PeerInfo::InitAsDefaultInstance() {
}

packet_PeerInfo::packet_PeerInfo(const packet_PeerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:payload.packet.PeerInfo)
}

void packet_PeerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_PeerInfo::~packet_PeerInfo() {
  // @@protoc_insertion_point(destructor:payload.packet.PeerInfo)
  SharedDtor();
}

void packet_PeerInfo::SharedDtor() {
  ipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void packet_PeerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_PeerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_PeerInfo_descriptor_;
}

const packet_PeerInfo& packet_PeerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_payload_2eproto();
  return *default_instance_;
}

packet_PeerInfo* packet_PeerInfo::default_instance_ = NULL;

packet_PeerInfo* packet_PeerInfo::New(::google::protobuf::Arena* arena) const {
  packet_PeerInfo* n = new packet_PeerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_PeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:payload.packet.PeerInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_ipaddress()) {
      ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    port_ = 0u;
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_PeerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:payload.packet.PeerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ipAddress = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "payload.packet.PeerInfo.ipAddress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userName;
        break;
      }

      // required string userName = 3;
      case 3: {
        if (tag == 26) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "payload.packet.PeerInfo.userName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:payload.packet.PeerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:payload.packet.PeerInfo)
  return false;
#undef DO_
}

void packet_PeerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:payload.packet.PeerInfo)
  // required string ipAddress = 1;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "payload.packet.PeerInfo.ipAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipaddress(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required string userName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "payload.packet.PeerInfo.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:payload.packet.PeerInfo)
}

::google::protobuf::uint8* packet_PeerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:payload.packet.PeerInfo)
  // required string ipAddress = 1;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "payload.packet.PeerInfo.ipAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipaddress(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required string userName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "payload.packet.PeerInfo.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payload.packet.PeerInfo)
  return target;
}

int packet_PeerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:payload.packet.PeerInfo)
  int total_size = 0;

  if (has_ipaddress()) {
    // required string ipAddress = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddress());
  }

  if (has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  if (has_username()) {
    // required string userName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  return total_size;
}
int packet_PeerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:payload.packet.PeerInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string ipAddress = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddress());

    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

    // required string userName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_PeerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:payload.packet.PeerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const packet_PeerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_PeerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:payload.packet.PeerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:payload.packet.PeerInfo)
    MergeFrom(*source);
  }
}

void packet_PeerInfo::MergeFrom(const packet_PeerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payload.packet.PeerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipaddress()) {
      set_has_ipaddress();
      ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void packet_PeerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:payload.packet.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_PeerInfo::CopyFrom(const packet_PeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payload.packet.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_PeerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void packet_PeerInfo::Swap(packet_PeerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_PeerInfo::InternalSwap(packet_PeerInfo* other) {
  ipaddress_.Swap(&other->ipaddress_);
  std::swap(port_, other->port_);
  username_.Swap(&other->username_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_PeerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_PeerInfo_descriptor_;
  metadata.reflection = packet_PeerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet_Crypto::kClientKeyFieldNumber;
const int packet_Crypto::kHashedKeyFieldNumber;
const int packet_Crypto::kEncryptedHashedKeyFieldNumber;
const int packet_Crypto::kEncryptedMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet_Crypto::packet_Crypto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:payload.packet.Crypto)
}

void packet_Crypto::InitAsDefaultInstance() {
}

packet_Crypto::packet_Crypto(const packet_Crypto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:payload.packet.Crypto)
}

void packet_Crypto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashedkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptedhashedkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptedmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_Crypto::~packet_Crypto() {
  // @@protoc_insertion_point(destructor:payload.packet.Crypto)
  SharedDtor();
}

void packet_Crypto::SharedDtor() {
  clientkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashedkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptedhashedkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptedmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void packet_Crypto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_Crypto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_Crypto_descriptor_;
}

const packet_Crypto& packet_Crypto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_payload_2eproto();
  return *default_instance_;
}

packet_Crypto* packet_Crypto::default_instance_ = NULL;

packet_Crypto* packet_Crypto::New(::google::protobuf::Arena* arena) const {
  packet_Crypto* n = new packet_Crypto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet_Crypto::Clear() {
// @@protoc_insertion_point(message_clear_start:payload.packet.Crypto)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_clientkey()) {
      clientkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hashedkey()) {
      hashedkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_encryptedhashedkey()) {
      encryptedhashedkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_encryptedmsg()) {
      encryptedmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet_Crypto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:payload.packet.Crypto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientkey().data(), this->clientkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "payload.packet.Crypto.clientKey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hashedKey;
        break;
      }

      // required bytes hashedKey = 2;
      case 2: {
        if (tag == 18) {
         parse_hashedKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashedkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_encryptedHashedKey;
        break;
      }

      // required bytes encryptedHashedKey = 3;
      case 3: {
        if (tag == 26) {
         parse_encryptedHashedKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryptedhashedkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_encryptedMsg;
        break;
      }

      // required bytes encryptedMsg = 4;
      case 4: {
        if (tag == 34) {
         parse_encryptedMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryptedmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:payload.packet.Crypto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:payload.packet.Crypto)
  return false;
#undef DO_
}

void packet_Crypto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:payload.packet.Crypto)
  // required string clientKey = 1;
  if (has_clientkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientkey().data(), this->clientkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "payload.packet.Crypto.clientKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientkey(), output);
  }

  // required bytes hashedKey = 2;
  if (has_hashedkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hashedkey(), output);
  }

  // required bytes encryptedHashedKey = 3;
  if (has_encryptedhashedkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->encryptedhashedkey(), output);
  }

  // required bytes encryptedMsg = 4;
  if (has_encryptedmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->encryptedmsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:payload.packet.Crypto)
}

::google::protobuf::uint8* packet_Crypto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:payload.packet.Crypto)
  // required string clientKey = 1;
  if (has_clientkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientkey().data(), this->clientkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "payload.packet.Crypto.clientKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientkey(), target);
  }

  // required bytes hashedKey = 2;
  if (has_hashedkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hashedkey(), target);
  }

  // required bytes encryptedHashedKey = 3;
  if (has_encryptedhashedkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->encryptedhashedkey(), target);
  }

  // required bytes encryptedMsg = 4;
  if (has_encryptedmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->encryptedmsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payload.packet.Crypto)
  return target;
}

int packet_Crypto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:payload.packet.Crypto)
  int total_size = 0;

  if (has_clientkey()) {
    // required string clientKey = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientkey());
  }

  if (has_hashedkey()) {
    // required bytes hashedKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hashedkey());
  }

  if (has_encryptedhashedkey()) {
    // required bytes encryptedHashedKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encryptedhashedkey());
  }

  if (has_encryptedmsg()) {
    // required bytes encryptedMsg = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encryptedmsg());
  }

  return total_size;
}
int packet_Crypto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:payload.packet.Crypto)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string clientKey = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientkey());

    // required bytes hashedKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hashedkey());

    // required bytes encryptedHashedKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encryptedhashedkey());

    // required bytes encryptedMsg = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encryptedmsg());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_Crypto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:payload.packet.Crypto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const packet_Crypto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const packet_Crypto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:payload.packet.Crypto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:payload.packet.Crypto)
    MergeFrom(*source);
  }
}

void packet_Crypto::MergeFrom(const packet_Crypto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payload.packet.Crypto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientkey()) {
      set_has_clientkey();
      clientkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientkey_);
    }
    if (from.has_hashedkey()) {
      set_has_hashedkey();
      hashedkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashedkey_);
    }
    if (from.has_encryptedhashedkey()) {
      set_has_encryptedhashedkey();
      encryptedhashedkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryptedhashedkey_);
    }
    if (from.has_encryptedmsg()) {
      set_has_encryptedmsg();
      encryptedmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryptedmsg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void packet_Crypto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:payload.packet.Crypto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_Crypto::CopyFrom(const packet_Crypto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payload.packet.Crypto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_Crypto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void packet_Crypto::Swap(packet_Crypto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet_Crypto::InternalSwap(packet_Crypto* other) {
  clientkey_.Swap(&other->clientkey_);
  hashedkey_.Swap(&other->hashedkey_);
  encryptedhashedkey_.Swap(&other->encryptedhashedkey_);
  encryptedmsg_.Swap(&other->encryptedmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet_Crypto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_Crypto_descriptor_;
  metadata.reflection = packet_Crypto_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packet::kTimeStampFieldNumber;
const int packet::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packet::packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:payload.packet)
}

void packet::InitAsDefaultInstance() {
  payload_ = const_cast< ::payload::packet_Payload*>(&::payload::packet_Payload::default_instance());
}

packet::packet(const packet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:payload.packet)
}

void packet::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  payload_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet::~packet() {
  // @@protoc_insertion_point(destructor:payload.packet)
  SharedDtor();
}

void packet::SharedDtor() {
  if (this != default_instance_) {
    delete payload_;
  }
}

void packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_descriptor_;
}

const packet& packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_payload_2eproto();
  return *default_instance_;
}

packet* packet::default_instance_ = NULL;

packet* packet::New(::google::protobuf::Arena* arena) const {
  packet* n = new packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packet::Clear() {
// @@protoc_insertion_point(message_clear_start:payload.packet)
  if (_has_bits_[0 / 32] & 3u) {
    time_stamp_ = GOOGLE_ULONGLONG(0);
    if (has_payload()) {
      if (payload_ != NULL) payload_->::payload::packet_Payload::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:payload.packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 time_stamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // required .payload.packet.Payload payload = 2;
      case 2: {
        if (tag == 18) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:payload.packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:payload.packet)
  return false;
#undef DO_
}

void packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:payload.packet)
  // required fixed64 time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->time_stamp(), output);
  }

  // required .payload.packet.Payload payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->payload_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:payload.packet)
}

::google::protobuf::uint8* packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:payload.packet)
  // required fixed64 time_stamp = 1;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->time_stamp(), target);
  }

  // required .payload.packet.Payload payload = 2;
  if (has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->payload_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payload.packet)
  return target;
}

int packet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:payload.packet)
  int total_size = 0;

  if (has_time_stamp()) {
    // required fixed64 time_stamp = 1;
    total_size += 1 + 8;
  }

  if (has_payload()) {
    // required .payload.packet.Payload payload = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);
  }

  return total_size;
}
int packet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:payload.packet)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required fixed64 time_stamp = 1;
    total_size += 1 + 8;

    // required .payload.packet.Payload payload = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:payload.packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const packet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:payload.packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:payload.packet)
    MergeFrom(*source);
  }
}

void packet::MergeFrom(const packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payload.packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_payload()) {
      mutable_payload()->::payload::packet_Payload::MergeFrom(from.payload());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:payload.packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet::CopyFrom(const packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payload.packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_payload()) {
    if (!this->payload_->IsInitialized()) return false;
  }
  return true;
}

void packet::Swap(packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packet::InternalSwap(packet* other) {
  std::swap(time_stamp_, other->time_stamp_);
  std::swap(payload_, other->payload_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_descriptor_;
  metadata.reflection = packet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_Payload

// required .payload.packet.MessageTypes type = 1 [default = PEER_INFO];
bool packet_Payload::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_Payload::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_Payload::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_Payload::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::payload::packet_MessageTypes packet_Payload::type() const {
  // @@protoc_insertion_point(field_get:payload.packet.Payload.type)
  return static_cast< ::payload::packet_MessageTypes >(type_);
}
 void packet_Payload::set_type(::payload::packet_MessageTypes value) {
  assert(::payload::packet_MessageTypes_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:payload.packet.Payload.type)
}

// optional .payload.packet.PeerInfo peerInfo = 2;
bool packet_Payload::has_peerinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_Payload::set_has_peerinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_Payload::clear_has_peerinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_Payload::clear_peerinfo() {
  if (peerinfo_ != NULL) peerinfo_->::payload::packet_PeerInfo::Clear();
  clear_has_peerinfo();
}
const ::payload::packet_PeerInfo& packet_Payload::peerinfo() const {
  // @@protoc_insertion_point(field_get:payload.packet.Payload.peerInfo)
  return peerinfo_ != NULL ? *peerinfo_ : *default_instance_->peerinfo_;
}
::payload::packet_PeerInfo* packet_Payload::mutable_peerinfo() {
  set_has_peerinfo();
  if (peerinfo_ == NULL) {
    peerinfo_ = new ::payload::packet_PeerInfo;
  }
  // @@protoc_insertion_point(field_mutable:payload.packet.Payload.peerInfo)
  return peerinfo_;
}
::payload::packet_PeerInfo* packet_Payload::release_peerinfo() {
  // @@protoc_insertion_point(field_release:payload.packet.Payload.peerInfo)
  clear_has_peerinfo();
  ::payload::packet_PeerInfo* temp = peerinfo_;
  peerinfo_ = NULL;
  return temp;
}
void packet_Payload::set_allocated_peerinfo(::payload::packet_PeerInfo* peerinfo) {
  delete peerinfo_;
  peerinfo_ = peerinfo;
  if (peerinfo) {
    set_has_peerinfo();
  } else {
    clear_has_peerinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:payload.packet.Payload.peerInfo)
}

// optional .payload.packet.Crypto crypto = 3;
bool packet_Payload::has_crypto() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void packet_Payload::set_has_crypto() {
  _has_bits_[0] |= 0x00000004u;
}
void packet_Payload::clear_has_crypto() {
  _has_bits_[0] &= ~0x00000004u;
}
void packet_Payload::clear_crypto() {
  if (crypto_ != NULL) crypto_->::payload::packet_Crypto::Clear();
  clear_has_crypto();
}
const ::payload::packet_Crypto& packet_Payload::crypto() const {
  // @@protoc_insertion_point(field_get:payload.packet.Payload.crypto)
  return crypto_ != NULL ? *crypto_ : *default_instance_->crypto_;
}
::payload::packet_Crypto* packet_Payload::mutable_crypto() {
  set_has_crypto();
  if (crypto_ == NULL) {
    crypto_ = new ::payload::packet_Crypto;
  }
  // @@protoc_insertion_point(field_mutable:payload.packet.Payload.crypto)
  return crypto_;
}
::payload::packet_Crypto* packet_Payload::release_crypto() {
  // @@protoc_insertion_point(field_release:payload.packet.Payload.crypto)
  clear_has_crypto();
  ::payload::packet_Crypto* temp = crypto_;
  crypto_ = NULL;
  return temp;
}
void packet_Payload::set_allocated_crypto(::payload::packet_Crypto* crypto) {
  delete crypto_;
  crypto_ = crypto;
  if (crypto) {
    set_has_crypto();
  } else {
    clear_has_crypto();
  }
  // @@protoc_insertion_point(field_set_allocated:payload.packet.Payload.crypto)
}

// -------------------------------------------------------------------

// packet_PeerInfo

// required string ipAddress = 1;
bool packet_PeerInfo::has_ipaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_PeerInfo::set_has_ipaddress() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_PeerInfo::clear_has_ipaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_PeerInfo::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipaddress();
}
 const ::std::string& packet_PeerInfo::ipaddress() const {
  // @@protoc_insertion_point(field_get:payload.packet.PeerInfo.ipAddress)
  return ipaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void packet_PeerInfo::set_ipaddress(const ::std::string& value) {
  set_has_ipaddress();
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:payload.packet.PeerInfo.ipAddress)
}
 void packet_PeerInfo::set_ipaddress(const char* value) {
  set_has_ipaddress();
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:payload.packet.PeerInfo.ipAddress)
}
 void packet_PeerInfo::set_ipaddress(const char* value, size_t size) {
  set_has_ipaddress();
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:payload.packet.PeerInfo.ipAddress)
}
 ::std::string* packet_PeerInfo::mutable_ipaddress() {
  set_has_ipaddress();
  // @@protoc_insertion_point(field_mutable:payload.packet.PeerInfo.ipAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* packet_PeerInfo::release_ipaddress() {
  // @@protoc_insertion_point(field_release:payload.packet.PeerInfo.ipAddress)
  clear_has_ipaddress();
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void packet_PeerInfo::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    set_has_ipaddress();
  } else {
    clear_has_ipaddress();
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:payload.packet.PeerInfo.ipAddress)
}

// required uint32 port = 2;
bool packet_PeerInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_PeerInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_PeerInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_PeerInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::google::protobuf::uint32 packet_PeerInfo::port() const {
  // @@protoc_insertion_point(field_get:payload.packet.PeerInfo.port)
  return port_;
}
 void packet_PeerInfo::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:payload.packet.PeerInfo.port)
}

// required string userName = 3;
bool packet_PeerInfo::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void packet_PeerInfo::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
void packet_PeerInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
void packet_PeerInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& packet_PeerInfo::username() const {
  // @@protoc_insertion_point(field_get:payload.packet.PeerInfo.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void packet_PeerInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:payload.packet.PeerInfo.userName)
}
 void packet_PeerInfo::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:payload.packet.PeerInfo.userName)
}
 void packet_PeerInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:payload.packet.PeerInfo.userName)
}
 ::std::string* packet_PeerInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:payload.packet.PeerInfo.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* packet_PeerInfo::release_username() {
  // @@protoc_insertion_point(field_release:payload.packet.PeerInfo.userName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void packet_PeerInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:payload.packet.PeerInfo.userName)
}

// -------------------------------------------------------------------

// packet_Crypto

// required string clientKey = 1;
bool packet_Crypto::has_clientkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet_Crypto::set_has_clientkey() {
  _has_bits_[0] |= 0x00000001u;
}
void packet_Crypto::clear_has_clientkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet_Crypto::clear_clientkey() {
  clientkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientkey();
}
 const ::std::string& packet_Crypto::clientkey() const {
  // @@protoc_insertion_point(field_get:payload.packet.Crypto.clientKey)
  return clientkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void packet_Crypto::set_clientkey(const ::std::string& value) {
  set_has_clientkey();
  clientkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:payload.packet.Crypto.clientKey)
}
 void packet_Crypto::set_clientkey(const char* value) {
  set_has_clientkey();
  clientkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:payload.packet.Crypto.clientKey)
}
 void packet_Crypto::set_clientkey(const char* value, size_t size) {
  set_has_clientkey();
  clientkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:payload.packet.Crypto.clientKey)
}
 ::std::string* packet_Crypto::mutable_clientkey() {
  set_has_clientkey();
  // @@protoc_insertion_point(field_mutable:payload.packet.Crypto.clientKey)
  return clientkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* packet_Crypto::release_clientkey() {
  // @@protoc_insertion_point(field_release:payload.packet.Crypto.clientKey)
  clear_has_clientkey();
  return clientkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void packet_Crypto::set_allocated_clientkey(::std::string* clientkey) {
  if (clientkey != NULL) {
    set_has_clientkey();
  } else {
    clear_has_clientkey();
  }
  clientkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientkey);
  // @@protoc_insertion_point(field_set_allocated:payload.packet.Crypto.clientKey)
}

// required bytes hashedKey = 2;
bool packet_Crypto::has_hashedkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet_Crypto::set_has_hashedkey() {
  _has_bits_[0] |= 0x00000002u;
}
void packet_Crypto::clear_has_hashedkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet_Crypto::clear_hashedkey() {
  hashedkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hashedkey();
}
 const ::std::string& packet_Crypto::hashedkey() const {
  // @@protoc_insertion_point(field_get:payload.packet.Crypto.hashedKey)
  return hashedkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void packet_Crypto::set_hashedkey(const ::std::string& value) {
  set_has_hashedkey();
  hashedkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:payload.packet.Crypto.hashedKey)
}
 void packet_Crypto::set_hashedkey(const char* value) {
  set_has_hashedkey();
  hashedkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:payload.packet.Crypto.hashedKey)
}
 void packet_Crypto::set_hashedkey(const void* value, size_t size) {
  set_has_hashedkey();
  hashedkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:payload.packet.Crypto.hashedKey)
}
 ::std::string* packet_Crypto::mutable_hashedkey() {
  set_has_hashedkey();
  // @@protoc_insertion_point(field_mutable:payload.packet.Crypto.hashedKey)
  return hashedkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* packet_Crypto::release_hashedkey() {
  // @@protoc_insertion_point(field_release:payload.packet.Crypto.hashedKey)
  clear_has_hashedkey();
  return hashedkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void packet_Crypto::set_allocated_hashedkey(::std::string* hashedkey) {
  if (hashedkey != NULL) {
    set_has_hashedkey();
  } else {
    clear_has_hashedkey();
  }
  hashedkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashedkey);
  // @@protoc_insertion_point(field_set_allocated:payload.packet.Crypto.hashedKey)
}

// required bytes encryptedHashedKey = 3;
bool packet_Crypto::has_encryptedhashedkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void packet_Crypto::set_has_encryptedhashedkey() {
  _has_bits_[0] |= 0x00000004u;
}
void packet_Crypto::clear_has_encryptedhashedkey() {
  _has_bits_[0] &= ~0x00000004u;
}
void packet_Crypto::clear_encryptedhashedkey() {
  encryptedhashedkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encryptedhashedkey();
}
 const ::std::string& packet_Crypto::encryptedhashedkey() const {
  // @@protoc_insertion_point(field_get:payload.packet.Crypto.encryptedHashedKey)
  return encryptedhashedkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void packet_Crypto::set_encryptedhashedkey(const ::std::string& value) {
  set_has_encryptedhashedkey();
  encryptedhashedkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:payload.packet.Crypto.encryptedHashedKey)
}
 void packet_Crypto::set_encryptedhashedkey(const char* value) {
  set_has_encryptedhashedkey();
  encryptedhashedkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:payload.packet.Crypto.encryptedHashedKey)
}
 void packet_Crypto::set_encryptedhashedkey(const void* value, size_t size) {
  set_has_encryptedhashedkey();
  encryptedhashedkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:payload.packet.Crypto.encryptedHashedKey)
}
 ::std::string* packet_Crypto::mutable_encryptedhashedkey() {
  set_has_encryptedhashedkey();
  // @@protoc_insertion_point(field_mutable:payload.packet.Crypto.encryptedHashedKey)
  return encryptedhashedkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* packet_Crypto::release_encryptedhashedkey() {
  // @@protoc_insertion_point(field_release:payload.packet.Crypto.encryptedHashedKey)
  clear_has_encryptedhashedkey();
  return encryptedhashedkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void packet_Crypto::set_allocated_encryptedhashedkey(::std::string* encryptedhashedkey) {
  if (encryptedhashedkey != NULL) {
    set_has_encryptedhashedkey();
  } else {
    clear_has_encryptedhashedkey();
  }
  encryptedhashedkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryptedhashedkey);
  // @@protoc_insertion_point(field_set_allocated:payload.packet.Crypto.encryptedHashedKey)
}

// required bytes encryptedMsg = 4;
bool packet_Crypto::has_encryptedmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void packet_Crypto::set_has_encryptedmsg() {
  _has_bits_[0] |= 0x00000008u;
}
void packet_Crypto::clear_has_encryptedmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
void packet_Crypto::clear_encryptedmsg() {
  encryptedmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encryptedmsg();
}
 const ::std::string& packet_Crypto::encryptedmsg() const {
  // @@protoc_insertion_point(field_get:payload.packet.Crypto.encryptedMsg)
  return encryptedmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void packet_Crypto::set_encryptedmsg(const ::std::string& value) {
  set_has_encryptedmsg();
  encryptedmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:payload.packet.Crypto.encryptedMsg)
}
 void packet_Crypto::set_encryptedmsg(const char* value) {
  set_has_encryptedmsg();
  encryptedmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:payload.packet.Crypto.encryptedMsg)
}
 void packet_Crypto::set_encryptedmsg(const void* value, size_t size) {
  set_has_encryptedmsg();
  encryptedmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:payload.packet.Crypto.encryptedMsg)
}
 ::std::string* packet_Crypto::mutable_encryptedmsg() {
  set_has_encryptedmsg();
  // @@protoc_insertion_point(field_mutable:payload.packet.Crypto.encryptedMsg)
  return encryptedmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* packet_Crypto::release_encryptedmsg() {
  // @@protoc_insertion_point(field_release:payload.packet.Crypto.encryptedMsg)
  clear_has_encryptedmsg();
  return encryptedmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void packet_Crypto::set_allocated_encryptedmsg(::std::string* encryptedmsg) {
  if (encryptedmsg != NULL) {
    set_has_encryptedmsg();
  } else {
    clear_has_encryptedmsg();
  }
  encryptedmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryptedmsg);
  // @@protoc_insertion_point(field_set_allocated:payload.packet.Crypto.encryptedMsg)
}

// -------------------------------------------------------------------

// packet

// required fixed64 time_stamp = 1;
bool packet::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void packet::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
void packet::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void packet::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
 ::google::protobuf::uint64 packet::time_stamp() const {
  // @@protoc_insertion_point(field_get:payload.packet.time_stamp)
  return time_stamp_;
}
 void packet::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:payload.packet.time_stamp)
}

// required .payload.packet.Payload payload = 2;
bool packet::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void packet::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
void packet::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
void packet::clear_payload() {
  if (payload_ != NULL) payload_->::payload::packet_Payload::Clear();
  clear_has_payload();
}
const ::payload::packet_Payload& packet::payload() const {
  // @@protoc_insertion_point(field_get:payload.packet.payload)
  return payload_ != NULL ? *payload_ : *default_instance_->payload_;
}
::payload::packet_Payload* packet::mutable_payload() {
  set_has_payload();
  if (payload_ == NULL) {
    payload_ = new ::payload::packet_Payload;
  }
  // @@protoc_insertion_point(field_mutable:payload.packet.payload)
  return payload_;
}
::payload::packet_Payload* packet::release_payload() {
  // @@protoc_insertion_point(field_release:payload.packet.payload)
  clear_has_payload();
  ::payload::packet_Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
void packet::set_allocated_payload(::payload::packet_Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  // @@protoc_insertion_point(field_set_allocated:payload.packet.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace payload

// @@protoc_insertion_point(global_scope)
